
Chats
Archived
Django models import error troubleshooting
5 days ago
code line length error fix
5 days ago
New chat with Assistant
Assistant answers questions, refines code, and makes precise edits.
Assistant mode

advanced
Claude 4.0 Sonnet

Ask Assistant, use @ to include specific files...
from django.contrib import admin
from django.urls import path, include
from rest_framework.permissions import AllowAny
from django.http import JsonResponse
from drf_spectacular.views import SpectacularAPIView, SpectacularSwaggerView

def ping(request):
    return JsonResponse({"status": "ok", "message": "Nova ERP API is running"})

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/ping/', ping),

    # Rutas globales API core
    path('api/', include('core.api.urls')),

    # Rutas específicas de apps
    path('api/auth/', include('accounts.urls')),
    path('auth/', include('social_django.urls', namespace='social')),

    # Documentación y esquema
    path('api/schema/', SpectacularAPIView.as_view(permission_classes=[AllowAny]), name='schema'),
    path('api/docs/', SpectacularSwaggerView.as_view(url_name='schema', permission_classes=[AllowAny]), name='swagger-ui'),
]


# """
# nova_erp_total URL Configuration
# URL configuration for nova_erp_total project.

# The `urlpatterns` list routes URLs to views. For more information please see:
#     https://docs.djangoproject.com/en/5.0/topics/http/urls/
# Examples:
# Function views
#     1. Add an import:  from my_app import views
#     2. Add a URL to urlpatterns:  path('', views.home, name='home')
# Class-based views
#     1. Add an import:  from other_app.views import Home
#     2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
# Including another URLconf
#     1. Import the include() function: from django.urls import include, path
#     2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
# """
# from django.contrib import admin
# from django.urls import path
# from django.urls.conf import include
# from rest_framework.permissions import AllowAny
# #JSON RESPONSE
# from django.http import JsonResponse

# #SPECTACULAR
# from drf_spectacular.views import SpectacularAPIView, SpectacularSwaggerView

# #PRUEBA JSON RESOPNSE
# def ping(request):
#     return JsonResponse({"status": "ok", "message": "Nova ERP API is running"})



# urlpatterns = [
#     path('admin/', admin.site.urls),
#     path('api/ping/', ping),

#     # Aquí montas los JWT
#     path('api/auth/', include('accounts.urls')),

#     path('auth/', include('social_django.urls', namespace='social')),

#     # 
#     path('api/schema/', SpectacularAPIView.as_view(permission_classes=[AllowAny]), name='schema'),
#     path('api/docs/', SpectacularSwaggerView.as_view(url_name='schema', permission_classes=[AllowAny]), name='swagger-ui'),
#     # path('api/schema/', SpectacularAPIView.as_view(permission_classes=[AllowAny]), name='schema'),
#     # path('api/docs/', SpectacularSwaggerView.as_view(url_name='schema', permission_classes=[AllowAny]), name='swagger-ui'),
#     # otras rutas...
#     # path('api/schema/', SpectacularAPIView.as_view(), name='schema'),
#     # path('api/docs/', SpectacularSwaggerView.as_view(url_name='schema'), name='swagger-ui')
# ]

DEFAULT_THROTTLE_CLASSES
1 / 1
current match. 'DEFAULT_THROTTLE_CLASSES': [ on line 131.
"""
Django settings for nova_erp_total project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from datetime import timedelta


# import sentry_sdk
# from sentry_sdk.integrations.django import DjangoIntegration
# Build paths inside the project like this: BASE_DIR / 'subdir'.


BASE_DIR = Path(__file__).resolve().parent.parent

import sentry_sdk

sentry_sdk.init(
    dsn="https://59a6b3f5a097d60c09ff94e6a517e6f4@o4509617180311552.ingest.us.sentry.io/4509617183981568",
    # Add data like request headers and IP for users,
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
)

ALLOWED_IPS = ['190.10.20.30', '10.0.0.1']  # oficina, cliente

class IPWhitelistMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        ip = request.META.get('REMOTE_ADDR')
        if ip not in ALLOWED_IPS:
            from django.http import HttpResponseForbidden
            return HttpResponseForbidden("IP no autorizada")
        return self.get_response(request)


# sentry_sdk.init(
#     dsn="https://tu_clave@o0.ingest.sentry.io/proyecto-id",
#     integrations=[DjangoIntegration()],
#     traces_sample_rate=1.0,  # o 0.1 para producción
#     send_default_pii=True,
# )


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-qamg-)bhge&qtj+!*ayn4+*vp6=u708^1^$nu5hf7#1refr+do'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [ '*' ]



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
DEFAULT_FROM_EMAIL = 'Nova_erp_api <yaview.lomeli@gmail.com>'
Usuario
1 / 19
current match. def __str__(self): on line 151.
        if extra_fields.get('is_superuser') is not True:
            raise ValueError('El superusuario debe tener is_superuser=True.')

        return self.create_user(username, email, password, empresa=empresa, **extra_fields)


class Usuario(AbstractBaseUser, PermissionsMixin):
    mfa_enabled = models.BooleanField(default=False)
    mfa_secret = models.CharField(max_length=32, blank=True, null=True)
    empresa = models.ForeignKey(Empresa, on_delete=models.CASCADE, related_name='usuarios')
    rol = models.ForeignKey(Rol, on_delete=models.SET_NULL, null=True, blank=True, related_name='usuarios')
    username = models.CharField(max_length=150, unique=True)
    email = models.EmailField(unique=True)
    # password = models.CharField(max_length=128)

    activo = models.BooleanField(default=True)  # si quieres mantenerlo aparte
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)
    is_superuser = models.BooleanField(default=False)

    fecha_creacion = models.DateTimeField(default=timezone.now)
    foto = models.URLField(blank=True, null=True)
    telefono = models.CharField(max_length=30, blank=True, null=True)
    direccion = models.TextField(blank=True, null=True)
    idioma = models.CharField(max_length=10, default='es')
    tema = models.CharField(max_length=50, default='claro')

    USERNAME_FIELD = 'username'
    REQUIRED_FIELDS = ['email']

    objects = UsuarioManager()

    class Meta:
        verbose_name = 'Usuario'
        verbose_name_plural = 'Usuarios'
        ordering = ['username']
        indexes = [
            models.Index(fields=['empresa', 'username']),
            models.Index(fields=['rol', 'activo']),
        ]

    # def __str__(self):
    #     return self.username

    def __str__(self):
        empresa_nombre = self.empresa.nombre if self.empresa else "Sin empresa"
        return f"{self.username} ({self.email}) - {empresa_nombre}"

    def get_full_name(self):
        return self.username

    def get_short_name(self):
        return self.username


Selection deleted
# accounts/urls.py

from django.urls import path, include
from rest_framework.routers import DefaultRouter

# Importación de vistas por módulos
from accounts.views import auth, profile, password_reset, mfa, audit, users
from accounts.views.roles import RolViewSet
from accounts.views.users import UsuarioViewSet
from accounts.views.audit import AuditLogListView, AuditLogExportCSV
from drf_spectacular.views import SpectacularAPIView, SpectacularSwaggerView
from .views.mfa import MFAEnableView, MFAVerifyView, MFADisableView, MFALoginVerifyView

# Rutas registradas con router para vistas basadas en ViewSet
router = DefaultRouter()
router.register(r'users', UsuarioViewSet, basename='usuarios')
router.register(r'roles', RolViewSet)

# Lista de URLs explícitas
urlpatterns = [

    # --- Autenticación ---
    path('login/', auth.LoginView.as_view(), name='login'),                        # POST - Iniciar sesión
    path('logout/', auth.LogoutView.as_view(), name='logout'),                     # POST - Cerrar sesión
    path('register/', auth.RegisterView.as_view(), name='register'),               # POST - Registro de usuario
    path('refresh/', auth.RefreshTokenView.as_view(), name='token-refresh'),       # POST - Refrescar token JWT

    # --- Perfil de usuario ---
    path('profile/', profile.ProfileView.as_view(), name='profile'),               # GET/PUT - Ver o editar perfil

    # --- Recuperación de contraseña ---
    path('password-reset/request/', password_reset.PasswordResetRequestView.as_view(), name='password-reset-request'),  # POST - Solicitar reinicio
    path('password-reset/confirm/', password_reset.PasswordResetConfirmView.as_view(), name='password-reset-confirm'),
    # path('password-reset/confirm/', password_reset.PasswordResetConfirmView.as_view(), name='password-reset-confirm'),  # POST - Confirmar reinicio

    # --- Autenticación de dos factores (2FA) ---
    path('2fa/verify-login/', MFALoginVerifyView.as_view(), name='mfa-verify-login'),  # POST - Verificar 2FA en login
    path('2fa/enable/', MFAEnableView.as_view(), name='mfa-enable'),                   # POST - Habilitar 2FA
    path('2fa/verify/', MFAVerifyView.as_view(), name='mfa-verify'),                   # POST - Verificar código 2FA
    path('2fa/disable/', MFADisableView.as_view(), name='mfa-disable'),                # POST - Deshabilitar 2FA

    # --- Actividad del usuario ---
    path('activity/', audit.ActivityLogView.as_view(), name='activity-log'),                # GET - Ver actividad

    # --- Auditoría ---
    path('audit-log/', AuditLogListView.as_view(), name='audit-log-list'),                  # GET - Lista de logs de auditoría
    path('audit-log/export-csv/', AuditLogExportCSV.as_view(), name='audit-log-export-csv'),# GET - Exportar logs como CSV

    # --- Vistas registradas mediante router (ViewSets) ---
    path('', include(router.urls)),

]


__str__ 
0 / 0
current match. class LogoutView(APIView): on line 81.
                accion="LOGIN_FAIL",
                tabla="Usuario",
                registro=f"Intento fallido de login para '{username}'"
            )
            raise

        user = serializer.validated_data['user']

        if getattr(user, 'mfa_enabled', False):
            temp_token = RefreshToken.for_user(user)
            registrar_auditoria(
                usuario=user,
                accion="LOGIN_MFA",
                tabla="Usuario",
                registro="Login exitoso (pendiente MFA)"
            )
            return Response({
                'mfa_required': True,
                'temp_token': str(temp_token.access_token),
                'detail': 'MFA_REQUIRED'
            }, status=202)

        refresh = RefreshToken.for_user(user)
        registrar_auditoria(
            usuario=user,
            accion="LOGIN",
            tabla="Usuario",
            registro="Login exitoso"
        )
        return Response({
            'access': str(refresh.access_token),
            'refresh': str(refresh),
            'user': UsuarioSerializer(user).data
        })
        
class LogoutView(APIView):
    permission_classes = [IsAuthenticated]
    serializer_class = EmptySerializer

    def post(self, request):
        refresh_token = request.data.get('refresh')

        if not refresh_token:
            return Response(
                {"detail": "Se requiere el refresh token para cerrar sesión."},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            token = RefreshToken(refresh_token)

            # Intenta agregarlo a la blacklist
            token.blacklist()

            registrar_auditoria(
                usuario=request.user,
                accion="LOGOUT",
                tabla="Usuario",
                registro="Logout exitoso"
            )

            return Response(
                {"detail": "Sesión cerrada correctamente."},
                status=status.HTTP_205_RESET_CONTENT
            )

        except TokenError as e:
            # Token ya fue rotado o está en blacklist
            return Response(
                {"detail": "El token ya fue usado o es inválido."},
                status=status.HTTP_400_BAD_REQUEST
            )

        except Exception as e:
            # Otros errores inesperados
            return Response(
                {"detail": "Error inesperado al cerrar sesión."},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

# class LogoutView(APIView):
#     permission_classes = [IsAuthenticated]
__str__ 
0 / 0
from rest_framework import serializers
from django.contrib.auth import authenticate
from .models import Usuario, Rol, Auditoria
from core.models import Empresa
import pyotp
# from accounts.serializers import AuditoriaSerializerMFALoginVerifyView
# Serializer para Login
class LoginSerializer(serializers.Serializer):
    username = serializers.CharField()
    password = serializers.CharField(write_only=True)

    def validate(self, data):
        username = data.get('username')
        password = data.get('password')

        if not username or not password:
            raise serializers.ValidationError("Usuario y contraseña son obligatorios.")

        user = authenticate(username=username, password=password)

        if user is None:
            raise serializers.ValidationError("Credenciales inválidas.")

        if not user.activo:
            raise serializers.ValidationError("La cuenta está inactiva. Contacta al administrador.")

        data['user'] = user
        return data

# Serializer para Registro
class UsuarioRegistroSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)

    class Meta:
        model = Usuario
        fields = ['empresa', 'rol', 'username', 'email', 'password']

    def create(self, validated_data):
        return Usuario.objects.create_user(**validated_data)

# Serializer para perfil
class UsuarioSerializer(serializers.ModelSerializer):
    class Meta:
        model = Usuario
        exclude = ['password']

# MFA (TOTP)
class EnableMFASerializer(serializers.Serializer):
    method = serializers.ChoiceField(choices=["totp", "sms"])

class VerifyMFASerializer(serializers.Serializer):
    code = serializers.CharField()

# Password Reset
class PasswordResetRequestSerializer(serializers.Serializer):
    email = serializers.EmailField()

class PasswordResetConfirmSerializer(serializers.Serializer):
    uidb64 = serializers.CharField()  # nuevo
    token = serializers.CharField()
    password = serializers.CharField(min_length=8)




class AuditoriaSerializer(serializers.ModelSerializer):
    usuario = serializers.StringRelatedField()

    class Meta:
        model = Auditoria
        fields = [
            'id',
            'usuario',
            'accion',
            'tabla_afectada',
            'registro_afectado',
            'timestamp',
        ]


#PRUEBA
class RolSerializer(serializers.ModelSerializer):
    class Meta:
        model = Rol
        fields = '__all__'



# Serializer para crear usuario
class UsuarioCreateSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, min_length=8)

    class Meta:
        model = Usuario
        fields = ['empresa', 'rol', 'username', 'email', 'password']

    def create(self, validated_data):
        return Usuario.objects.create_user(**validated_data)

# Serializer para listar, actualizar, eliminar usuario
class UsuarioDetailSerializer(serializers.ModelSerializer):
    empresa_nombre = serializers.CharField(source='empresa.nombre', read_only=True)
    rol_nombre = serializers.CharField(source='rol.nombre', read_only=True)

    class Meta:
        model = Usuario
        exclude = ['password']
        read_only_fields = ['id', 'fecha_creacion', 'empresa_nombre', 'rol_nombre']

class MFAEnableSerializer(serializers.Serializer):
    # En la activación solo se confirma que el usuario quiere activar
    pass

class MFAVerifySerializer(serializers.Serializer):
    code = serializers.CharField(max_length=6)

class MFADisableSerializer(serializers.Serializer):
    code = serializers.CharField(max_length=6)
__str__ 
0 / 0
from django.apps import AppConfig


class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'

class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'

    def ready(self):
        import accounts.signals  # 👈 conecta señales
# accounts/views/audit.py
from rest_framework import generics, filters
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework.permissions import IsAdminUser
from rest_framework.pagination import PageNumberPagination
from accounts.models import Auditoria
from accounts.serializers import AuditoriaSerializer
from accounts.filters import AuditoriaFilter
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from accounts.models import Auditoria
from accounts.serializers import AuditoriaSerializer
from django.http import HttpResponse
import csv

from rest_framework.generics import GenericAPIView
from rest_framework.response import Response
from rest_framework import serializers

class EmptySerializer(serializers.Serializer):
    pass

class AuditLogExportCSV(APIView):
    permission_classes = [IsAdminUser]
    serializer_class = EmptySerializer

    def get(self, request):
        # Aplicar filtros con el mismo filtro set
        filtro = AuditoriaFilter(request.GET, queryset=Auditoria.objects.all())

        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'] = 'attachment; filename="audit_log.csv"'

        writer = csv.writer(response)
        writer.writerow(['ID', 'Usuario', 'Acción', 'Tabla', 'Registro Afectado', 'Fecha/Hora'])

        for entry in filtro.qs.order_by('-timestamp'):
            writer.writerow([
                entry.id,
                str(entry.usuario),
                entry.accion,
                entry.tabla_afectada,
                entry.registro_afectado,
                entry.timestamp.strftime('%Y-%m-%d %H:%M:%S'),
            ])

        return response

class ActivityLogView(APIView):
    permission_classes = [IsAuthenticated]
    queryset = Auditoria.objects.all()
    serializer_class = AuditoriaSerializer

    def get(self, request):
        logs = Auditoria.objects.filter(usuario_id=request.user.id).order_by('-timestamp')[:50]
        data = AuditoriaSerializer(logs, many=True).data
        return Response(data)

class AuditLogView(APIView):
    permission_classes = [IsAuthenticated]  # ¿solo admins?

    def get(self, request):
        logs = Auditoria.objects.all().order_by('-timestamp')[:200]
        data = AuditoriaSerializer(logs, many=True).data
        return Response(data)

class StandardResultsSetPagination(PageNumberPagination):
    page_size = 25
    page_size_query_param = 'page_size'
    max_page_size = 100

class AuditLogListView(generics.ListAPIView):
    queryset = Auditoria.objects.all()
    serializer_class = AuditoriaSerializer
    permission_classes = [IsAdminUser]
    filter_backends = [DjangoFilterBackend, filters.OrderingFilter]
    filterset_class = AuditoriaFilter
    ordering_fields = ['timestamp', 'usuario__username', 'accion', 'tabla_afectada']
MFALoginVerifyView
1 / 2
current match. class MFALoginVerifyView(APIView): on line 145.
            return Response({"detail": "Token inválido o expirado", "error": str(e)}, status=401)
        except KeyError:
            return Response({"detail": "Token mal formado"}, status=400)
        except Usuario.DoesNotExist:
            return Response({"detail": "Usuario no encontrado"}, status=404)

        if not user.mfa_secret:
            return Response({"detail": "2FA no habilitado para este usuario"}, status=400)

        totp = pyotp.TOTP(user.mfa_secret)
        if totp.verify(code):
            refresh = RefreshToken.for_user(user)
            return Response({
                'access': str(refresh.access_token),
                'refresh': str(refresh),
                'user': UsuarioSerializer(user).data
            })

        return Response({"detail": "Código MFA inválido"}, status=400)
# class MFALoginVerifyView(APIView):
#     permission_classes = [AllowAny]
#     serializer_class = MFAVerifySerializer

#     def post(self, request):
#         token = request.data.get("temp_token")  # El token temporal que el cliente recibe
#         code = request.data.get("code")  # El código OTP del usuario

#         # Validar datos incompletos
#         if not token or not code:
#             return Response({"detail": "Datos incompletos"}, status=400)

#         try:
#             # Decodificar el token temporal
#             access_token = AccessToken(token)
#             user_id = access_token['user_id']
#             user = Usuario.objects.get(id=user_id)
#         except KeyError:
#             return Response({"detail": "Token mal formado"}, status=400)
#         except Usuario.DoesNotExist:
#             return Response({"detail": "Usuario no encontrado"}, status=404)

#         # Verificar si el usuario tiene habilitado 2FA
#         if not user.mfa_secret:
#             return Response({"detail": "2FA no habilitado para este usuario"}, status=400)

#         # Verificar el código de 2FA
#         totp = pyotp.TOTP(user.mfa_secret)
#         if totp.verify(code):
#             # Si el código es válido, generar nuevos tokens
#             refresh = RefreshToken.for_user(user)
#             return Response({
#                 'access': str(refresh.access_token),
#                 'refresh': str(refresh),
#                 'user': UsuarioSerializer(user).data
#             })

#         # Si el código 2FA es incorrecto
#         return Response({"detail": "Código MFA inválido"}, status=400)




from drf_spectacular.utils import extend_schema_view, extend_schema, OpenApiResponse
from rest_framework import viewsets

@extend_schema_view(
    post=extend_schema(
        summary="Login",
        description="Autenticación con JWT",
        responses={
            200: OpenApiResponse(description="Login exitoso"),
            400: OpenApiResponse(description="Datos inválidos"),
            401: OpenApiResponse(description="Credenciales incorrectas"),
            500: OpenApiResponse(description="Error interno"),
        },
    ),
    get=extend_schema(
        summary="Ver perfil",
        description="Datos del usuario autenticado",
        responses={
            200: OpenApiResponse(description="Datos del usuario"),
            401: OpenApiResponse(description="Token inválido o no enviado"),
        },
    ),
)
class AuthViewSet(viewsets.ViewSet):
    pass

spectacular
1 / 4
current match. # from drf_spectacular.utils import on line 109.
    if sender._meta.app_label in ['accounts', 'ventas', 'compras', 'inventario']:
        registrar_auditoria(instance, "ELIMINADO")



# --- /home/runner/workspace/accounts/apps.py ---
from django.apps import AppConfig


class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'

class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'

    def ready(self):
        import accounts.signals  # 👈 conecta señales


# --- /home/runner/workspace/accounts/filters.py ---
# accounts/filters.py
import django_filters
from accounts.models import Auditoria

class AuditoriaFilter(django_filters.FilterSet):
    fecha_inicio = django_filters.DateTimeFilter(field_name='timestamp', lookup_expr='gte')
    fecha_fin = django_filters.DateTimeFilter(field_name='timestamp', lookup_expr='lte')

    class Meta:
        model = Auditoria
        fields = {
            'usuario__username': ['exact', 'icontains'],
            'accion': ['exact', 'icontains'],
            'tabla_afectada': ['exact', 'icontains'],
        }



# --- /home/runner/workspace/accounts/admin.py ---
# accounts/admin.py
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from accounts.models import Usuario, Rol, Auditoria

@admin.register(Usuario)
class UsuarioAdmin(BaseUserAdmin):
    list_display = ('username', 'email', 'empresa', 'rol')  # elimina is_staff, is_active
    list_filter = ('rol', 'empresa')  # elimina is_staff, is_active

    # Campos para el formulario de edición
    fieldsets = (
        (None, {'fields': ('username', 'password')}),
        ('Información Personal', {'fields': ('email', 'empresa', 'rol')}),
        ('Permisos', {'fields': ('is_staff', 'is_active', 'is_superuser', 'groups', 'user_permissions')}),
        ('Fechas importantes', {'fields': ('last_login', 'date_joined')}),
    )

    # Campos que se usarán para crear usuario
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('username', 'email', 'empresa', 'rol', 'password1', 'password2', 'is_staff', 'is_active')}
        ),
    )

    search_fields = ('username', 'email')
    ordering = ('username',)

@admin.register(Rol)
class RolAdmin(admin.ModelAdmin):
    list_display = ('nombre', 'descripcion')
    list_display = ('nombre', 'descripcion')


@admin.register(Auditoria)
class AuditoriaAdmin(admin.ModelAdmin):
    list_display = ('usuario', 'accion', 'tabla_afectada', 'timestamp')
    list_filter = ('accion', 'tabla_afectada', 'timestamp')
    search_fields = ('usuario__username', 'accion', 'tabla_afectada', 'registro_afectado')
runserver 
0 / 0
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'nova_erp_total.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

-174775ms
 • 
In 3 minutes
Port :3000 opened on
/
Open a new tab to test authentication and file uploads.

Enable "Accessible Terminal" in Workspace Settings to use a screen reader with the shell.
Port :8000 opened, but not exposed to the web.