
# --- /home/runner/workspace/contabilidad/__init__.py ---



# --- /home/runner/workspace/contabilidad/admin.py ---
from django.contrib import admin

# Register your models here.



# --- /home/runner/workspace/contabilidad/apps.py ---
from django.apps import AppConfig


class ContabilidadConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'contabilidad'



# --- /home/runner/workspace/contabilidad/tests.py ---
from django.test import TestCase

# Create your tests here.



# --- /home/runner/workspace/contabilidad/views.py ---
from django.shortcuts import render

# Create your views here.



# --- /home/runner/workspace/contabilidad/models.py ---
# contabilidad/models.py

from django.db import models
from django.utils import timezone
from accounts.models import Usuario, Empresa
from django.core.exceptions import ValidationError
from django.utils import timezone


class AsientoContable(models.Model):
    empresa = models.ForeignKey(Empresa, on_delete=models.CASCADE, related_name='asientos_contables')
    fecha = models.DateField(default=timezone.now)
    concepto = models.CharField(max_length=255)
    usuario = models.ForeignKey(Usuario, on_delete=models.SET_NULL, null=True, blank=True, related_name='asientos_creados')
    creado_en = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = "Asiento Contable"
        verbose_name_plural = "Asientos Contables"
        ordering = ['-fecha', '-creado_en']
        indexes = [
            models.Index(fields=['empresa', 'fecha']),
        ]

    def __str__(self):
        return f"Asiento {self.id} - {self.concepto} ({self.fecha})"


class DetalleAsiento(models.Model):
    asiento = models.ForeignKey(AsientoContable, on_delete=models.CASCADE, related_name='detalles')
    cuenta_contable = models.CharField(max_length=100)  # Ejemplo: "1105 - Caja"
    debe = models.DecimalField(max_digits=14, decimal_places=2, default=0)
    haber = models.DecimalField(max_digits=14, decimal_places=2, default=0)

    def clean(self):
        if self.debe < 0 or self.haber < 0:
            raise ValidationError("Debe y Haber no pueden ser negativos.")
        if self.debe == 0 and self.haber == 0:
            raise ValidationError("Debe o Haber deben tener un valor distinto de cero.")


    class Meta:
        verbose_name = "Detalle de Asiento"
        verbose_name_plural = "Detalles de Asientos"
        ordering = ['cuenta_contable']
        indexes = [
            models.Index(fields=['asiento', 'cuenta_contable']),
        ]
        # Opcional: agregar restricción para que debe y haber no sean ambos cero, se haría con CheckConstraint (Django 2.2+)
        constraints = [
            models.CheckConstraint(
                check=~(models.Q(debe=0) & models.Q(haber=0)),
                name='debe_o_haber_no_pueden_ser_cero',
            )
        ]

    def __str__(self):
        return f"{self.cuenta_contable} | Debe: {self.debe} | Haber: {self.haber}"



# --- /home/runner/workspace/contabilidad/migrations/__init__.py ---



# --- /home/runner/workspace/contabilidad/migrations/0001_initial.py ---
# Generated by Django 5.2.4 on 2025-07-04 22:50

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AsientoContable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateField(default=django.utils.timezone.now)),
                ('concepto', models.CharField(max_length=255)),
                ('creado_en', models.DateTimeField(auto_now_add=True)),
                ('empresa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='asientos_contables', to='core.empresa')),
                ('usuario', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='asientos_creados', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Asiento Contable',
                'verbose_name_plural': 'Asientos Contables',
                'ordering': ['-fecha', '-creado_en'],
            },
        ),
        migrations.CreateModel(
            name='DetalleAsiento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cuenta_contable', models.CharField(max_length=100)),
                ('debe', models.DecimalField(decimal_places=2, default=0, max_digits=14)),
                ('haber', models.DecimalField(decimal_places=2, default=0, max_digits=14)),
                ('asiento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detalles', to='contabilidad.asientocontable')),
            ],
            options={
                'verbose_name': 'Detalle de Asiento',
                'verbose_name_plural': 'Detalles de Asientos',
                'ordering': ['cuenta_contable'],
            },
        ),
        migrations.AddIndex(
            model_name='asientocontable',
            index=models.Index(fields=['empresa', 'fecha'], name='contabilida_empresa_2ddfb3_idx'),
        ),
        migrations.AddIndex(
            model_name='detalleasiento',
            index=models.Index(fields=['asiento', 'cuenta_contable'], name='contabilida_asiento_1bd092_idx'),
        ),
        migrations.AddConstraint(
            model_name='detalleasiento',
            constraint=models.CheckConstraint(condition=models.Q(('debe', 0), ('haber', 0), _negated=True), name='debe_o_haber_no_pueden_ser_cero'),
        ),
    ]



# --- /home/runner/workspace/contabilidad/views/__init_.py ---


