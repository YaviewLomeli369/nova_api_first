
# --- /home/runner/workspace/compras/__init__.py ---



# --- /home/runner/workspace/compras/admin.py ---
from django.contrib import admin

# Register your models here.



# --- /home/runner/workspace/compras/apps.py ---
from django.apps import AppConfig


class ComprasConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'compras'



# --- /home/runner/workspace/compras/tests.py ---
from django.test import TestCase

# Create your tests here.



# --- /home/runner/workspace/compras/models.py ---
# compras/models.py
from django.db import models
from django.utils import timezone
from accounts.models import Usuario, Empresa
from inventario.models import Producto
from django.core.exceptions import ValidationError
from django.utils import timezone

class Proveedor(models.Model):
    empresa = models.ForeignKey(Empresa, on_delete=models.CASCADE, related_name='proveedores')
    nombre = models.CharField(max_length=255)
    rfc = models.CharField(max_length=13)
    correo = models.EmailField(blank=True, null=True)
    telefono = models.CharField(max_length=30, blank=True, null=True)
    direccion = models.TextField(blank=True, null=True)
    creado_en = models.DateTimeField(auto_now_add=True)
    actualizado_en = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = "Proveedor"
        verbose_name_plural = "Proveedores"
        unique_together = ('empresa', 'rfc')
        ordering = ['nombre']

    def __str__(self):
        return self.nombre


class Compra(models.Model):
    ESTADO_CHOICES = [
        ('pendiente', 'Pendiente'),
        ('completada', 'Completada'),
        ('cancelada', 'Cancelada'),
    ]

    empresa = models.ForeignKey(Empresa, on_delete=models.CASCADE, related_name='compras')
    proveedor = models.ForeignKey(Proveedor, on_delete=models.PROTECT, related_name='compras')
    fecha = models.DateTimeField(default=timezone.now)
    total = models.DecimalField(max_digits=14, decimal_places=2)
    estado = models.CharField(max_length=20, choices=ESTADO_CHOICES, default='pendiente')
    usuario = models.ForeignKey(Usuario, on_delete=models.SET_NULL, null=True, blank=True, related_name='compras_creadas')

    class Meta:
        verbose_name = "Compra"
        verbose_name_plural = "Compras"
        ordering = ['-fecha']
        indexes = [
            models.Index(fields=['empresa', 'fecha']),
            models.Index(fields=['estado']),
        ]

    def __str__(self):
        return f'Compra #{self.id} - {self.proveedor.nombre} - {self.fecha.strftime("%Y-%m-%d")}'


class DetalleCompra(models.Model):
    compra = models.ForeignKey(Compra, on_delete=models.CASCADE, related_name='detalles')
    producto = models.ForeignKey(Producto, on_delete=models.PROTECT, related_name='detalles_compra')
    cantidad = models.DecimalField(max_digits=12, decimal_places=2)
    precio_unitario = models.DecimalField(max_digits=14, decimal_places=2)

    def clean(self):
        if self.cantidad <= 0:
            raise ValidationError("La cantidad debe ser mayor a cero.")
        if self.precio_unitario <= 0:
            raise ValidationError("El precio unitario debe ser mayor a cero.")


    class Meta:
        verbose_name = "Detalle de Compra"
        verbose_name_plural = "Detalles de Compras"
        unique_together = ('compra', 'producto')

    def __str__(self):
        return f'{self.producto.nombre} - {self.cantidad} x {self.precio_unitario}'




# --- /home/runner/workspace/compras/filters.py ---
# compras/filters.py

import django_filters
from compras.models import Compra

class CompraFilter(django_filters.FilterSet):
    fecha_compra = django_filters.DateFilter(field_name='fecha', lookup_expr='exact')

    class Meta:
        model = Compra
        fields = ['empresa', 'proveedor']



# --- /home/runner/workspace/compras/urls.py ---
from compras.views.proveedor_views import ProveedorViewSet


from rest_framework import routers
from django.urls import path, include
from compras.views.compra_views import CompraViewSet

router = routers.DefaultRouter()
router.register(r'providers', ProveedorViewSet, basename='proveedor')
router.register(r'purchases', CompraViewSet, basename='purchases')

urlpatterns = [
    path('', include(router.urls)),
]


# --- /home/runner/workspace/compras/migrations/__init__.py ---



# --- /home/runner/workspace/compras/migrations/0001_initial.py ---
# Generated by Django 5.2.4 on 2025-07-04 22:50

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('inventario', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Proveedor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255)),
                ('rfc', models.CharField(max_length=13)),
                ('correo', models.EmailField(blank=True, max_length=254, null=True)),
                ('telefono', models.CharField(blank=True, max_length=30, null=True)),
                ('direccion', models.TextField(blank=True, null=True)),
                ('creado_en', models.DateTimeField(auto_now_add=True)),
                ('actualizado_en', models.DateTimeField(auto_now=True)),
                ('empresa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proveedores', to='core.empresa')),
            ],
            options={
                'verbose_name': 'Proveedor',
                'verbose_name_plural': 'Proveedores',
                'ordering': ['nombre'],
                'unique_together': {('empresa', 'rfc')},
            },
        ),
        migrations.CreateModel(
            name='Compra',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateTimeField(default=django.utils.timezone.now)),
                ('total', models.DecimalField(decimal_places=2, max_digits=14)),
                ('estado', models.CharField(choices=[('pendiente', 'Pendiente'), ('completada', 'Completada'), ('cancelada', 'Cancelada')], default='pendiente', max_length=20)),
                ('empresa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compras', to='core.empresa')),
                ('usuario', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compras_creadas', to=settings.AUTH_USER_MODEL)),
                ('proveedor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='compras', to='compras.proveedor')),
            ],
            options={
                'verbose_name': 'Compra',
                'verbose_name_plural': 'Compras',
                'ordering': ['-fecha'],
            },
        ),
        migrations.CreateModel(
            name='DetalleCompra',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cantidad', models.DecimalField(decimal_places=2, max_digits=12)),
                ('precio_unitario', models.DecimalField(decimal_places=2, max_digits=14)),
                ('compra', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detalles', to='compras.compra')),
                ('producto', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='detalles_compra', to='inventario.producto')),
            ],
            options={
                'verbose_name': 'Detalle de Compra',
                'verbose_name_plural': 'Detalles de Compras',
                'unique_together': {('compra', 'producto')},
            },
        ),
        migrations.AddIndex(
            model_name='compra',
            index=models.Index(fields=['empresa', 'fecha'], name='compras_com_empresa_147b8e_idx'),
        ),
        migrations.AddIndex(
            model_name='compra',
            index=models.Index(fields=['estado'], name='compras_com_estado_d26ae1_idx'),
        ),
    ]



# --- /home/runner/workspace/compras/views/__init_.py ---
from .proveedor_views import ProveedorViewSet

__all__ = ['ProveedorViewSet']


# --- /home/runner/workspace/compras/views/compra_views.py ---
from rest_framework import viewsets, filters
from rest_framework.permissions import AllowAny, IsAuthenticated
from django_filters.rest_framework import DjangoFilterBackend
from compras.models import Compra
from compras.serializers import CompraSerializer
from accounts.permissions import IsSuperAdminOrCompras



class CompraViewSet(viewsets.ModelViewSet):
    queryset = Compra.objects.all()
    serializer_class = CompraSerializer
    # permission_classes = [IsSuperAdminOrCompras] # ðŸ‘ˆ AsegÃºrate de tener este permiso
    permission_classes = [AllowAny]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ['empresa', 'proveedor']
    search_fields = ['factura', 'comentarios']
    ordering_fields = [ 'creado_en']
    ordering = []

    def get_queryset(self):
        empresa = getattr(self.request.user, 'empresa_actual', None)
        if empresa:
            return Compra.objects.filter(empresa=empresa)
        return Compra.objects.none()

    def perform_create(self, serializer):
        empresa = getattr(self.request.user, 'empresa_actual', None)
        serializer.save(empresa=empresa)



# --- /home/runner/workspace/compras/views/proveedor_views.py ---
# compras/views/proveedor_views.py
from rest_framework import viewsets, filters
from rest_framework.permissions import IsAuthenticated, AllowAny
from django_filters.rest_framework import DjangoFilterBackend
from compras.models import Proveedor
from compras.serializers import ProveedorSerializer
from accounts.permissions import IsSuperAdminOrCompras

class ProveedorViewSet(viewsets.ModelViewSet):
    queryset = Proveedor.objects.all()
    serializer_class = ProveedorSerializer
    # permission_classes = [IsSuperAdminOrCompras] # ðŸ‘ˆ AsegÃºrate de tener este permiso
    permission_classes = [AllowAny]

    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ['empresa', 'rfc', 'correo', 'telefono']
    search_fields = ['nombre', 'rfc', 'correo']
    ordering_fields = ['nombre', 'creado_en', 'actualizado_en']
    ordering = ['nombre']

    def get_queryset(self):
        user = self.request.user
        empresa = getattr(user, 'empresa_actual', None)
        if empresa:
            return Proveedor.objects.filter(empresa=empresa)
        return Proveedor.objects.none()

    def perform_create(self, serializer):
        empresa = getattr(self.request.user, 'empresa_actual', None)
        serializer.save(empresa=empresa)



# --- /home/runner/workspace/compras/serializers/proveedor_serializers.py ---
# compras/serializers.py
from rest_framework import serializers
from compras.models import Proveedor, Compra, DetalleCompra
# from compras.models import Proveedor, Compra, DetalleCompra

from inventario.models import Producto

class ProveedorSerializer(serializers.ModelSerializer):
    class Meta:
        model = Proveedor
        fields = [
            'id', 'empresa', 'nombre', 'rfc', 'correo', 'telefono', 'direccion',
            'creado_en', 'actualizado_en'
        ]
        read_only_fields = ['id', 'creado_en', 'actualizado_en']


# --- /home/runner/workspace/compras/serializers/__init__.py ---
from .proveedor_serializers import ProveedorSerializer
from .detalle_compra_serializers import DetalleCompraSerializer
from .compra_serializers import CompraSerializer

__all__ = [
    'ProveedorSerializer',
    'DetalleCompraSerializer',
    'CompraSerializer',
]
# from .proveedor_serializers import ProveedorSerializer
# from .detalle_compra_serializers import DetalleCompraSerializer
# from .compra_serializers import CompraSerializer

# __all__ = [
#     'ProveedorSerializer',
#     'DetalleCompraSerializer',
#     'CompraSerializer',
# ]


# --- /home/runner/workspace/compras/serializers/compra_serializers.py ---
from rest_framework import serializers
from compras.models import Proveedor, Compra, DetalleCompra
from compras.serializers.detalle_compra_serializers import DetalleCompraSerializer


class CompraSerializer(serializers.ModelSerializer):
  detalles = DetalleCompraSerializer(many=True)
  total = serializers.DecimalField(max_digits=14,
                                   decimal_places=2,
                                   read_only=True)
  nombre_proveedor = serializers.CharField(source='proveedor.nombre',
                                           read_only=True)

  class Meta:
    model = Compra
    fields = [
        'id', 'empresa', 'proveedor', 'nombre_proveedor', 'fecha', 'estado',
        'usuario', 'total', 'detalles'
    ]
    read_only_fields = ['id', 'total']

  def validate(self, data):
    if data.get('estado') not in dict(Compra.ESTADO_CHOICES):
      raise serializers.ValidationError("Estado invÃ¡lido.")
    return data

  def create(self, validated_data):
    detalles_data = validated_data.pop('detalles')
    total = 0

    compra = Compra.objects.create(**validated_data)

    for detalle_data in detalles_data:
      detalle = DetalleCompra.objects.create(compra=compra, **detalle_data)
      total += detalle.cantidad * detalle.precio_unitario

    compra.total = total
    compra.save()

    return compra

  def update(self, instance, validated_data):
    detalles_data = validated_data.pop('detalles', None)

    for attr, value in validated_data.items():
      setattr(instance, attr, value)

    if detalles_data is not None:
      instance.detalles.all().delete()
      total = 0
      for detalle_data in detalles_data:
        detalle = DetalleCompra.objects.create(compra=instance, **detalle_data)
        total += detalle.cantidad * detalle.precio_unitario
      instance.total = total

    instance.save()
    return instance


# --- /home/runner/workspace/compras/serializers/detalle_compra_serializers.py ---
# compras/serializers.py
from rest_framework import serializers
# from .models import  DetalleCompra
from compras.models import DetalleCompra
# from compras.serializers.detalle_compra_serializers import DetalleCompraSerializer

from inventario.models import Producto


class DetalleCompraSerializer(serializers.ModelSerializer):
  nombre_producto = serializers.CharField(source='producto.nombre', read_only=True)

  class Meta:
      model = DetalleCompra
      fields = ['id', 'producto', 'nombre_producto', 'cantidad', 'precio_unitario']

  def validate(self, data):
      producto = data.get('producto')
      cantidad = data.get('cantidad')
      precio_unitario = data.get('precio_unitario')

      if producto and not producto.activo:
          raise serializers.ValidationError("El producto seleccionado estÃ¡ inactivo.")

      if cantidad is not None and cantidad <= 0:
          raise serializers.ValidationError("La cantidad debe ser mayor a cero.")

      if precio_unitario is not None and precio_unitario <= 0:
          raise serializers.ValidationError("El precio unitario debe ser mayor a cero.")

      return data

