
# --- /home/runner/workspace/finanzas/__init__.py ---



# --- /home/runner/workspace/finanzas/admin.py ---
from django.contrib import admin

# Register your models here.



# --- /home/runner/workspace/finanzas/apps.py ---
from django.apps import AppConfig


class FinanzasConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'finanzas'



# --- /home/runner/workspace/finanzas/tests.py ---
from django.test import TestCase

# Create your tests here.



# --- /home/runner/workspace/finanzas/constants.py ---
# finanzas/constants.py (nuevo archivo)
ESTADO_CUENTA_CHOICES = [
    ('PENDIENTE', 'Pendiente'),
    ('PAGADO', 'Pagado'),
    ('VENCIDO', 'Vencido'),
]


# --- /home/runner/workspace/finanzas/models.py ---
# finanzas/models.py
from .constants import ESTADO_CUENTA_CHOICES
from django.db import models
from django.utils import timezone
from ventas.models import Venta
from compras.models import Compra
from django.core.exceptions import ValidationError
from django.utils import timezone

class CuentaPorCobrar(models.Model):
    ESTADO_CHOICES = ESTADO_CUENTA_CHOICES

    venta = models.ForeignKey(Venta, on_delete=models.CASCADE, related_name='cuentas_por_cobrar')
    monto = models.DecimalField(max_digits=14, decimal_places=2)
    fecha_vencimiento = models.DateField()
    estado = models.CharField(max_length=10, choices=ESTADO_CHOICES, default='PENDIENTE')

    def clean(self):
        if self.monto <= 0:
            raise ValidationError("El monto debe ser mayor a cero.")
        if self.fecha_vencimiento < timezone.now().date():
            raise ValidationError("La fecha de vencimiento no puede estar en el pasado.")


    class Meta:
        verbose_name = "Cuenta por Cobrar"
        verbose_name_plural = "Cuentas por Cobrar"
        ordering = ['fecha_vencimiento']
        indexes = [
            models.Index(fields=['fecha_vencimiento', 'estado']),
            models.Index(fields=['venta']),
        ]

    def __str__(self):
        return f"CxC Venta {self.venta.id} - {self.estado} - ${self.monto}"


class CuentaPorPagar(models.Model):
    ESTADO_CHOICES = [
        ('PENDIENTE', 'Pendiente'),
        ('PAGADO', 'Pagado'),
        ('VENCIDO', 'Vencido'),
    ]

    compra = models.ForeignKey(Compra, on_delete=models.CASCADE, related_name='cuentas_por_pagar')
    monto = models.DecimalField(max_digits=14, decimal_places=2)
    fecha_vencimiento = models.DateField()
    estado = models.CharField(max_length=10, choices=ESTADO_CHOICES, default='PENDIENTE')

    def clean(self):
        if self.monto <= 0:
            raise ValidationError("El monto debe ser mayor a cero.")
        if self.fecha_vencimiento < timezone.now().date():
            raise ValidationError("La fecha de vencimiento no puede estar en el pasado.")

    class Meta:
        verbose_name = "Cuenta por Pagar"
        verbose_name_plural = "Cuentas por Pagar"
        ordering = ['fecha_vencimiento']
        indexes = [
            models.Index(fields=['fecha_vencimiento', 'estado']),
            models.Index(fields=['compra']),
        ]

    def __str__(self):
        return f"CxP Compra {self.compra.id} - {self.estado} - ${self.monto}"


class Pago(models.Model):
    METODO_PAGO_CHOICES = [
        ('EFECTIVO', 'Efectivo'),
        ('TARJETA', 'Tarjeta'),
        ('TRANSFERENCIA', 'Transferencia'),
        ('CHEQUE', 'Cheque'),
        ('OTRO', 'Otro'),
    ]

    cuenta_cobrar = models.ForeignKey(CuentaPorCobrar, on_delete=models.CASCADE, null=True, blank=True, related_name='pagos')
    cuenta_pagar = models.ForeignKey(CuentaPorPagar, on_delete=models.CASCADE, null=True, blank=True, related_name='pagos')
    monto = models.DecimalField(max_digits=14, decimal_places=2)
    fecha = models.DateField(default=timezone.now)
    metodo_pago = models.CharField(max_length=50)

    def clean(self):
        if self.monto <= 0:
            raise ValidationError("El monto del pago debe ser positivo.")
        if not self.cuenta_cobrar and not self.cuenta_pagar:
            raise ValidationError("El pago debe estar vinculado a una cuenta por pagar o por cobrar.")

    class Meta:
        verbose_name = "Pago"
        verbose_name_plural = "Pagos"
        ordering = ['-fecha']
        indexes = [
            models.Index(fields=['fecha']),
            models.Index(fields=['metodo_pago']),
        ]

    def __str__(self):
        cuenta = 'CxC' if self.cuenta_cobrar else 'CxP' if self.cuenta_pagar else 'N/A'
        referencia_id = self.cuenta_cobrar.id if self.cuenta_cobrar else self.cuenta_pagar.id if self.cuenta_pagar else 'N/A'
        return f"Pago {cuenta} ID {referencia_id} - ${self.monto} - {self.fecha}"



# --- /home/runner/workspace/finanzas/migrations/__init__.py ---



# --- /home/runner/workspace/finanzas/migrations/0001_initial.py ---
# Generated by Django 5.2.4 on 2025-07-04 22:50

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('compras', '0001_initial'),
        ('ventas', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CuentaPorCobrar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monto', models.DecimalField(decimal_places=2, max_digits=14)),
                ('fecha_vencimiento', models.DateField()),
                ('estado', models.CharField(choices=[('PENDIENTE', 'Pendiente'), ('PAGADO', 'Pagado'), ('VENCIDO', 'Vencido')], default='PENDIENTE', max_length=10)),
                ('venta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cuentas_por_cobrar', to='ventas.venta')),
            ],
            options={
                'verbose_name': 'Cuenta por Cobrar',
                'verbose_name_plural': 'Cuentas por Cobrar',
                'ordering': ['fecha_vencimiento'],
            },
        ),
        migrations.CreateModel(
            name='CuentaPorPagar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monto', models.DecimalField(decimal_places=2, max_digits=14)),
                ('fecha_vencimiento', models.DateField()),
                ('estado', models.CharField(choices=[('PENDIENTE', 'Pendiente'), ('PAGADO', 'Pagado'), ('VENCIDO', 'Vencido')], default='PENDIENTE', max_length=10)),
                ('compra', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cuentas_por_pagar', to='compras.compra')),
            ],
            options={
                'verbose_name': 'Cuenta por Pagar',
                'verbose_name_plural': 'Cuentas por Pagar',
                'ordering': ['fecha_vencimiento'],
            },
        ),
        migrations.CreateModel(
            name='Pago',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monto', models.DecimalField(decimal_places=2, max_digits=14)),
                ('fecha', models.DateField(default=django.utils.timezone.now)),
                ('metodo_pago', models.CharField(max_length=50)),
                ('cuenta_cobrar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pagos', to='finanzas.cuentaporcobrar')),
                ('cuenta_pagar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pagos', to='finanzas.cuentaporpagar')),
            ],
            options={
                'verbose_name': 'Pago',
                'verbose_name_plural': 'Pagos',
                'ordering': ['-fecha'],
            },
        ),
        migrations.AddIndex(
            model_name='cuentaporcobrar',
            index=models.Index(fields=['fecha_vencimiento', 'estado'], name='finanzas_cu_fecha_v_ed0862_idx'),
        ),
        migrations.AddIndex(
            model_name='cuentaporcobrar',
            index=models.Index(fields=['venta'], name='finanzas_cu_venta_i_fcf135_idx'),
        ),
        migrations.AddIndex(
            model_name='cuentaporpagar',
            index=models.Index(fields=['fecha_vencimiento', 'estado'], name='finanzas_cu_fecha_v_ec0010_idx'),
        ),
        migrations.AddIndex(
            model_name='cuentaporpagar',
            index=models.Index(fields=['compra'], name='finanzas_cu_compra__fb090c_idx'),
        ),
        migrations.AddIndex(
            model_name='pago',
            index=models.Index(fields=['fecha'], name='finanzas_pa_fecha_24441f_idx'),
        ),
        migrations.AddIndex(
            model_name='pago',
            index=models.Index(fields=['metodo_pago'], name='finanzas_pa_metodo__d75da5_idx'),
        ),
    ]



# --- /home/runner/workspace/finanzas/views/__init_.py ---



# --- /home/runner/workspace/finanzas/serializers/cuentas_por_cobrar_serializer.py ---
from rest_framework import serializers
from finanzas.models import CuentaPorCobrar

class CuentaPorCobrarSerializer(serializers.ModelSerializer):
    venta_id = serializers.IntegerField(source='venta.id', read_only=True)
    cliente_nombre = serializers.CharField(source='venta.cliente.nombre', read_only=True)

    class Meta:
        model = CuentaPorCobrar
        fields = [
            'id',
            'venta',
            'venta_id',
            'cliente_nombre',
            'monto',
            'fecha_vencimiento',
            'estado',
        ]



# --- /home/runner/workspace/finanzas/serializers/cuentas_por_pagar_serializer.py ---
from rest_framework import serializers
from finanzas.models import CuentaPorPagar

class CuentaPorPagarSerializer(serializers.ModelSerializer):
    compra_id = serializers.IntegerField(source='compra.id', read_only=True)
    proveedor_nombre = serializers.CharField(source='compra.proveedor.nombre', read_only=True)

    class Meta:
        model = CuentaPorPagar
        fields = [
            'id',
            'compra',
            'compra_id',
            'proveedor_nombre',
            'monto',
            'fecha_vencimiento',
            'estado',
        ]



# --- /home/runner/workspace/finanzas/serializers/pago_serializer.py ---
from rest_framework import serializers
from finanzas.models import CuentaPorCobrar, CuentaPorPagar, Pago

class PagoSerializer(serializers.ModelSerializer):
    cuenta_cobrar_id = serializers.PrimaryKeyRelatedField(
        queryset=CuentaPorCobrar.objects.all(), required=False, allow_null=True
    )
    cuenta_pagar_id = serializers.PrimaryKeyRelatedField(
        queryset=CuentaPorPagar.objects.all(), required=False, allow_null=True
    )
    tipo = serializers.SerializerMethodField()

    class Meta:
        model = Pago
        fields = [
            'id',
            'cuenta_cobrar_id',
            'cuenta_pagar_id',
            'monto',
            'fecha',
            'metodo_pago',
            'tipo',
        ]

    def get_tipo(self, obj):
        if obj.cuenta_cobrar:
            return "CxC"
        elif obj.cuenta_pagar:
            return "CxP"
        return "N/A"

    def validate(self, data):
        if not data.get('cuenta_cobrar_id') and not data.get('cuenta_pagar_id'):
            raise serializers.ValidationError("Debe vincularse a una cuenta por cobrar o por pagar.")
        return data



# --- /home/runner/workspace/finanzas/serializers/__init__.py ---
from .cuentas_por_cobrar_serializer import CuentaPorCobrarSerializer
from .cuentas_por_pagar_serializer import CuentaPorPagarSerializer
from .pago_serializer import PagoSerializer


